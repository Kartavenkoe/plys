#include <iostream>  // Подключение библиотеки для ввода-вывода
#include <cmath>     // Подключение библиотеки для математических функций
#include <limits>    // Подключение библиотеки для работы с пределами числовых типов

class Point {  // Объявление класса Point
private:  // Приватные члены класса
    double x;  // Координата x точки
    double y;  // Координата y точки

public:  // Публичные члены класса
    // Конструкторы
    Point() : x(0), y(0) {}  // Конструктор по умолчанию, инициализирует точку в начале координат (0, 0)
    Point(double x, double y) : x(x), y(y) {}  // Конструктор с параметрами, инициализирует точку с заданными координатами
    Point(const Point& other) : x(other.x), y(other.y) {}  // Конструктор копирования

    // Метод для вычисления расстояния до начала координат
    double distanceToOrigin() const {  // Метод возвращает расстояние от точки до начала координат
        return std::sqrt(x * x + y * y);  // Вычисление расстояния по формуле sqrt(x^2 + y^2)
    }

    // Перегрузка оператора вывода
    friend std::ostream& operator<<(std::ostream& os, const Point& point) {  // Перегрузка оператора << для вывода координат точки
        os << "Point(" << point.x << ", " << point.y << ")";  // Вывод координат точки в формате Point(x, y)
        return os;
    }

    // Унарные операции
    Point operator--() {  // Перегрузка оператора -- (префиксная форма)
        --x;  // Уменьшение координаты x на 1
        --y;  // Уменьшение координаты y на 1
        return *this;  // Возврат измененной точки
    }

    Point operator-() const {  // Перегрузка унарного оператора -
        return Point(y, x);  // Возврат новой точки с переставленными координатами (y, x)
    }

    // Операции приведения типа
    operator int() const {  // Неявное приведение типа к int
        return static_cast<int>(x);  // Возврат целой части координаты x
    }

    explicit operator double() const {  // Явное приведение типа к double
        return y;  // Возврат координаты y
    }

    // Бинарные операции
    Point operator-(int value) const {  // Перегрузка оператора - для вычитания целого числа
        return Point(x - value, y);  // Возврат новой точки с уменьшенной координатой x
    }

    double operator-(const Point& other) const {  // Перегрузка оператора - для вычитания другой точки
        return std::sqrt((x - other.x) * (x - other.x) + (y - other.y) * (y - other.y));  // Вычисление расстояния между двумя точками
    }

    // Геттеры и сеттеры
    double getX() const { return x; }  // Геттер для координаты x
    double getY() const { return y; }  // Геттер для координаты y
    void setX(double x) { this->x = x; }  // Сеттер для координаты x
    void setY(double y) { this->y = y; }  // Сеттер для координаты y
};

bool isValidInput(double x, double y) {  // Функция для проверки корректности ввода
    return std::cin.fail() == false;  // Возвращает true, если ввод корректен
}

int main() {  // Главная функция
    double x, y;  // Объявление переменных для координат точки
    std::cout << "Введите координаты точки (x y): ";  // Вывод приглашения для ввода координат
    while (true) {  // Бесконечный цикл для проверки ввода
        std::cin >> x >> y;  // Ввод координат x и y
        if (isValidInput(x, y)) {  // Проверка корректности ввода
            break;  // Выход из цикла, если ввод корректен
        } else {  // Если ввод некорректен
            std::cout << "Некорректный ввод. Пожалуйста, введите числовые значения для x и y: ";  // Вывод сообщения об ошибке
            std::cin.clear();  // Очистка флага ошибки
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');  // Очистка буфера ввода
        }
    }

    Point p1(x, y);  // Создание объекта класса Point с введенными координатами
    std::cout << "Созданная точка: " << p1 << std::endl;  // Вывод созданной точки
    std::cout << "Расстояние до начала координат: " << p1.distanceToOrigin() << std::endl;  // Вывод расстояния до начала координат
    std::cout << "Решение: Расстояние до начала координат вычисляется по формуле sqrt(x^2 + y^2)." << std::endl;  // Вывод объяснения вычисления расстояния

    // Унарные операции
    --p1;  // Уменьшение координат точки на 1
    std::cout << "После операции -- (уменьшение координат на 1): " << p1 << std::endl;  // Вывод измененной точки

    Point p2 = -p1;  // Перестановка координат точки
    std::cout << "После операции - (перестановка координат): " << p2 << std::endl;  // Вывод точки с переставленными координатами

    // Операции приведения типа
    int intX = p1;  // Приведение координаты x к типу int
    std::cout << "Целая часть координаты x: " << intX << std::endl;  // Вывод целой части координаты x

    double doubleY = static_cast<double>(p1);  // Приведение координаты y к типу double
    std::cout << "Координата y: " << doubleY << std::endl;  // Вывод координаты y

    // Бинарные операции
    Point p3 = p1 - 5;  // Уменьшение координаты x на 5
    std::cout << "После операции - с целым числом (уменьшение координаты x на 5): " << p3 << std::endl;  // Вывод измененной точки

    double distance = p1 - p2;  // Вычисление расстояния между двумя точками
    std::cout << "Расстояние между точками: " << distance << std::endl;  // Вывод расстояния между точками

    return 0;  // Возврат 0, указывающий на успешное завершение программы
}
